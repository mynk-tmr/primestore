/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as AuthSignupIndexImport } from './routes/_auth/signup/index'
import { Route as AuthLoginIndexImport } from './routes/_auth/login/index'
import { Route as AuthForgotPasswordIndexImport } from './routes/_auth/forgot-password/index'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthSignupIndexRoute = AuthSignupIndexImport.update({
  path: '/signup/',
  getParentRoute: () => rootRoute,
} as any)

const AuthLoginIndexRoute = AuthLoginIndexImport.update({
  path: '/login/',
  getParentRoute: () => rootRoute,
} as any)

const AuthForgotPasswordIndexRoute = AuthForgotPasswordIndexImport.update({
  path: '/forgot-password/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_auth/forgot-password/': {
      id: '/_auth/forgot-password/'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof AuthForgotPasswordIndexImport
      parentRoute: typeof rootRoute
    }
    '/_auth/login/': {
      id: '/_auth/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginIndexImport
      parentRoute: typeof rootRoute
    }
    '/_auth/signup/': {
      id: '/_auth/signup/'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof AuthSignupIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/forgot-password': typeof AuthForgotPasswordIndexRoute
  '/login': typeof AuthLoginIndexRoute
  '/signup': typeof AuthSignupIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/forgot-password': typeof AuthForgotPasswordIndexRoute
  '/login': typeof AuthLoginIndexRoute
  '/signup': typeof AuthSignupIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_auth/forgot-password/': typeof AuthForgotPasswordIndexRoute
  '/_auth/login/': typeof AuthLoginIndexRoute
  '/_auth/signup/': typeof AuthSignupIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/forgot-password' | '/login' | '/signup'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/forgot-password' | '/login' | '/signup'
  id:
    | '__root__'
    | '/'
    | '/_auth/forgot-password/'
    | '/_auth/login/'
    | '/_auth/signup/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthForgotPasswordIndexRoute: typeof AuthForgotPasswordIndexRoute
  AuthLoginIndexRoute: typeof AuthLoginIndexRoute
  AuthSignupIndexRoute: typeof AuthSignupIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthForgotPasswordIndexRoute: AuthForgotPasswordIndexRoute,
  AuthLoginIndexRoute: AuthLoginIndexRoute,
  AuthSignupIndexRoute: AuthSignupIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth/forgot-password/",
        "/_auth/login/",
        "/_auth/signup/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_auth/forgot-password/": {
      "filePath": "_auth/forgot-password/index.tsx"
    },
    "/_auth/login/": {
      "filePath": "_auth/login/index.tsx"
    },
    "/_auth/signup/": {
      "filePath": "_auth/signup/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
